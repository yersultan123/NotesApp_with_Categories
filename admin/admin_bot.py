import os
import sqlite3

from aiogram import Bot, Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import Command
from database.database import check_phone_in_postgres
from database.sqlite_db import check_user_by_telegram_id

API_TOKEN = os.getenv("ADMIN_TG_API_KEY")
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

class AdminStates(StatesGroup):
    waiting_for_contact = State()
    waiting_for_new_domain = State()

def admin_keyboard():
    buttons = [
        [KeyboardButton(text="üì° –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –¥–æ–º–µ–Ω")],
        [KeyboardButton(text="üïò –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")],
        [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–º–µ–Ω")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


@dp.message(Command(commands=["start"]))
async def cmd_start(message: types.Message, state: FSMContext):
    settings_db.init_settings_db()
    existing = await check_user_by_telegram_id(message.from_user.id)
    if existing:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:",
            reply_markup=admin_keyboard()
        )
        return
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
            ],
            resize_keyboard=True
        )
    )
    await state.set_state(AdminStates.waiting_for_contact)


@dp.message(lambda msg: msg.contact is not None, AdminStates.waiting_for_contact)
async def process_contact(message: types.Message, state: FSMContext):
    phone = f"+{message.contact.phone_number.lstrip('+')}"
    user_data = check_phone_in_postgres(phone)
    if user_data:
        await message.answer("–î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.", reply_markup=admin_keyboard())
        await state.clear()
    else:
        await message.answer("–í–∞—à –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç.")


@dp.message(lambda msg: msg.text == "üì° –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –¥–æ–º–µ–Ω")
async def show_domain(message: types.Message):
    domain = settings_db.get_domain()
    if domain:
        await message.answer(f"–¢–µ–∫—É—â–∏–π –¥–æ–º–µ–Ω:\n{domain}")
    else:
        await message.answer("–î–æ–º–µ–Ω –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω.")


@dp.message(lambda msg: msg.text == "üïò –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
async def history(message: types.Message):
    conn = sqlite3.connect(settings_db.DB)
    cur = conn.cursor()
    cur.execute("SELECT old_value, new_value, changed_by, changed_at FROM domain_history ORDER BY id DESC LIMIT 10")
    rows = cur.fetchall()
    conn.close()
    if not rows:
        await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–π –µ—â—ë –Ω–µ –±—ã–ª–æ.")
        return
    text = ["–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π:"]
    for old, new, by, at in rows:
        text.append(f"{at}: {old or '[–ø—É—Å—Ç–æ]'} ‚Üí {new} (by {by})")
    await message.answer("\n".join(text))


@dp.message(lambda msg: msg.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–º–µ–Ω")
async def edit_domain(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
    )
    await state.set_state(AdminStates.waiting_for_new_domain)


@dp.message(AdminStates.waiting_for_new_domain)
async def process_new_domain(message: types.Message, state: FSMContext):
    new = message.text.strip()
    settings_db.set_domain(new, changer_phone=str(message.from_user.id))
    await message.answer(
        f"–î–æ–º–µ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞:\n{new}\n\n"
        "–î–æ–º–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
    , reply_markup=admin_keyboard())
    await state.clear()


if __name__ == "__main__":
    import asyncio

    from database import settings_db
    settings_db.init_settings_db()
    asyncio.run(dp.start_polling(bot, skip_updates=True))
