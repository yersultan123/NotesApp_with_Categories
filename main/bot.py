import asyncio
import io
import logging
import tempfile
from functools import wraps
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram.types.input_file import FSInputFile, BufferedInputFile
from dotenv import load_dotenv
import os
from database.sqlite_db import (
    add_user,
    check_user_by_telegram_id,
    init_db,
    update_notifications_status,
    get_notifications_status,
    DB,
    check_user_active
)
from database.database import check_phone_in_postgres
from additional import CSVcorrector

if not os.path.exists("../downloads"):
    os.makedirs("../downloads")

load_dotenv()

API_TOKEN = os.getenv("TG_API_KEY")
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


class UserDataState(StatesGroup):
    waiting_for_name = State()


class UploadCSV(StatesGroup):
    waiting_for_file = State()


class CSVCorrection(StatesGroup):
    waiting_for_file = State()


def get_main_keyboard(is_enabled: bool):
    notification_text = "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if is_enabled else "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=notification_text), KeyboardButton(text="üìã –ó–∞—è–≤–∫–∏")],
            [KeyboardButton(text="‚öôÔ∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å CSV")]
        ],
        resize_keyboard=True
    )


def check_user_active_decorator(handler):
    @wraps(handler)
    async def wrapper(message: types.Message, *args, **kwargs):
        telegram_id = message.from_user.id
        user = await check_user_by_telegram_id(telegram_id)
        if not user:
            await message.answer("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        phone = user[1]
        is_active = await check_user_active(phone)
        if not is_active:
            await message.answer("–í—ã –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã.")
            return
        return await handler(message, *args, **kwargs)
    return wrapper


async def process_csv_file(file_path: str) -> str:
    loop = asyncio.get_running_loop()
    processed_content = await loop.run_in_executor(None, process_csv_sync, file_path)
    with tempfile.NamedTemporaryFile(delete=False, suffix='_corrected.csv', mode='w', encoding='utf-8') as tmp:
        tmp.write(processed_content)
        return tmp.name


def process_csv_sync(file_path: str) -> str:
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    return CSVcorrector.process_csv(content)


@dp.message(Command("start"))
async def start_handler(message: types.Message):
    user = await check_user_by_telegram_id(message.from_user.id)
    if user:
        notifications_enabled = await get_notifications_status(message.from_user.id)
        await message.answer("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!", reply_markup=get_main_keyboard(notifications_enabled))
    else:
        phone_keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
            resize_keyboard=True
        )
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", reply_markup=phone_keyboard)


@dp.message(lambda message: message.contact is not None)
async def process_contact(message: types.Message):
    phone = f"+{message.contact.phone_number.lstrip('+')}"
    loop = asyncio.get_running_loop()
    user_data = await loop.run_in_executor(None, lambda: check_phone_in_postgres(phone))
    if user_data:
        telegram_id = message.from_user.id
        await add_user(phone, telegram_id)
        await message.answer("–í–∞—à –Ω–æ–º–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", reply_markup=get_main_keyboard(True))
    else:
        await message.answer("–í–∞—à –Ω–æ–º–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")


@dp.message(lambda message: message.text in ["üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"])
@check_user_active_decorator
async def toggle_notifications(message: types.Message):
    telegram_id = message.from_user.id
    current_status = await get_notifications_status(telegram_id)
    new_status = not current_status
    await update_notifications_status(telegram_id, new_status)
    status_text = "–≤–∫–ª—é—á–∏–ª–∏" if new_status else "–æ—Ç–∫–ª—é—á–∏–ª–∏"
    await message.answer(f"–í—ã {status_text} –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–æ–∫.", reply_markup=get_main_keyboard(new_status))


@dp.message(lambda message: message.text == "üìã –ó–∞—è–≤–∫–∏")
@check_user_active_decorator
async def show_tasks(message: types.Message):
    telegram_id = message.from_user.id
    async with aiosqlite.connect(DB) as db:
        cursor = await db.execute(
            "SELECT ttk_number, month_day, loco_number FROM user_tasks WHERE telegram_id = ? ORDER BY id DESC LIMIT 5",
            (telegram_id,)
        )
        tasks = await cursor.fetchall()
        if tasks:
            task_buttons = [
                [KeyboardButton(text=f"–∑–∞—è–≤–∫–∞: {task[0]}, {task[1]}, {task[2]}")]
                for task in tasks
            ]
            task_buttons.append([KeyboardButton(text="–ù–∞–∑–∞–¥"), KeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å")])
            task_keyboard = ReplyKeyboardMarkup(keyboard=task_buttons, resize_keyboard=True)
            await message.answer("–í–∞—à–∏ –∑–∞—è–≤–∫–∏:", reply_markup=task_keyboard)
        else:
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥"), KeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å")]],
                    resize_keyboard=True
                )
            )


@dp.message(lambda message: message.text == "–û–±–Ω–æ–≤–∏—Ç—å")
@check_user_active_decorator
async def refresh_tasks(message: types.Message):
    await show_tasks(message)


@dp.message(lambda message: message.text is not None and message.text.startswith("–∑–∞—è–≤–∫–∞:"))
async def send_task_description(message: types.Message):
    try:
        ttk_number = message.text.split(":")[1].split(",")[0].strip()
    except IndexError:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
        return

    telegram_id = message.from_user.id
    async with aiosqlite.connect(DB) as db:
        cursor = await db.execute(
            "SELECT description FROM user_tasks WHERE telegram_id = ? AND ttk_number = ?",
            (telegram_id, ttk_number)
        )
        row = await cursor.fetchone()

    if not row:
        await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        return
    description_with_link = row[0]
    await message.answer(
        f"üìã –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ {ttk_number}:\n\n{description_with_link}",
        parse_mode="HTML",
        disable_web_page_preview=True
    )



@dp.message(lambda message: message.text == "–ù–∞–∑–∞–¥")
@check_user_active_decorator
async def go_back(message: types.Message):
    notifications_enabled = await get_notifications_status(message.from_user.id)
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard(notifications_enabled))


@dp.message(lambda message: message.text == "üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV")
async def request_file(message: types.Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª.")
    await state.set_state(UploadCSV.waiting_for_file)


async def upload_csv_filter(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    return current_state == UploadCSV.waiting_for_file and message.document is not None


@dp.message(upload_csv_filter)
async def handle_file(message: types.Message, state: FSMContext):
    document = message.document
    if not document.file_name.endswith('.csv'):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV.")
        return
    file_path = f"downloads/{document.file_name}"
    try:
        file_info = await bot.get_file(document.file_id)
        file_bytes = await bot.download_file(file_info.file_path)
        with open(file_path, 'wb') as f:
            f.write(file_bytes)
        processed_file_path = await process_csv_file(file_path)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return


    if processed_file_path:
        input_file = FSInputFile(processed_file_path)
        await message.answer_document(input_file, caption="–í–æ—Ç –≤–∞—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª!")
        try:
            os.remove(processed_file_path)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {processed_file_path}: {e}")
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")
    if os.path.exists(file_path):
        try:
            os.remove(file_path)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {file_path}: {e}")
    await state.clear()



@dp.message(lambda message: message.text == "‚öôÔ∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å CSV")
async def request_csv_correction(message: types.Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏.")
    await state.set_state(CSVCorrection.waiting_for_file)


async def csv_correction_filter(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    return current_state == CSVCorrection.waiting_for_file and message.document is not None


@dp.message(csv_correction_filter)
async def handle_csv_correction(message: types.Message, state: FSMContext):
    document = message.document
    if not document.file_name.endswith('.csv'):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV.")
        return
    try:
        file_info = await bot.get_file(document.file_id)
        file_obj = await bot.download_file(file_info.file_path)
        if isinstance(file_obj, io.BytesIO):
            file_content = file_obj.getvalue().decode('utf-8')
        else:
            file_content = file_obj.decode('utf-8')
        processed_content = CSVcorrector.process_csv(file_content)
        processed_file = io.BytesIO(processed_content.encode('utf-8'))
        input_file = BufferedInputFile(processed_file.getvalue(), filename=document.file_name.replace('.csv', '_corrected.csv'))
        await message.answer_document(input_file, caption="‚öôÔ∏è –í–æ—Ç –≤–∞—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª!")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
    await state.clear()


async def main():
    await init_db()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot, skip_updates=True)


if __name__ == "__main__":
    asyncio.run(main())
